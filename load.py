import numpy as np
from tensorflow.keras.models import load_model
from tensorflow import keras

data = [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]]]
data = np.expand_dims(data, -1)
print(np.shape(data))
model = load_model('model.h5')
# summarize model.
model.summary()
#print(keras.datasets.mnist.load_data()[0][0][0])
#(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
#x_train = x_train.astype("float32") / 255
#x_train = np.expand_dims(x_train, -1)
#print(x_train.shape)
#print(y_train.shape)
#y_train = keras.utils.to_categorical(y_train, 10)
#score = model.evaluate(x_train, y_train, verbose=0)
#print("Test loss:", score[0]*100)
#print("Test accuracy:", score[1]*100)
#model verifier: Yes, can test acurate above 95% on the test data in mnist so... I'm not sure why it's doing
#terrible on my data.

X = data[:, 0:28]
Y = [0]#answer of what it actually is
Y = keras.utils.to_categorical(Y, 10)
#print(np.shape(X))
score = model.evaluate(data, Y, verbose=0)
predictions = (model.predict(X) > 0.5).astype(int)
print(predictions)
predictions = predictions.tolist()
prediction = np.max(predictions)
#print("%s: %.2f%%" % (model.metrics_names[1], score[1] * 100))
print("AI says what you wrote is: "+str(predictions[0].index(prediction)))
#KERAS YOUR MODEL SCKS